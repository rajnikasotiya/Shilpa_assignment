# !pip install pandas nltk sentence-transformers faiss-cpu

import pandas as pd
import re
import string
import nltk
import numpy as np
import faiss
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from sentence_transformers import SentenceTransformer

# Load the dataset
df = pd.read_csv("medical.dat", sep="\t", names=["TEXT", "label"], encoding='utf-8')

# Download stopwords
nltk.download('stopwords')
stop_words = set(stopwords.words('english'))
stemmer = PorterStemmer()

# Text preprocessing
def preprocess(text):
    text = str(text).lower()
    text = re.sub(r'\d+', '', text)
    text = text.translate(str.maketrans('', '', string.punctuation))
    tokens = text.split()
    tokens = [stemmer.stem(tok) for tok in tokens if tok not in stop_words]
    return ' '.join(tokens)

df['clean_text'] = df['TEXT'].apply(preprocess)

# Sentence embeddings
model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')
corpus = df['clean_text'].tolist()
corpus_embeddings = model.encode(corpus, convert_to_numpy=True).astype('float32')

# FAISS index
faiss.normalize_L2(corpus_embeddings)
dim = corpus_embeddings.shape[1]
index = faiss.IndexFlatIP(dim)
index.add(corpus_embeddings)

# User query
query = input("Enter your medical query: ")
query_processed = preprocess(query)
query_embedding = model.encode([query_processed], convert_to_numpy=True).astype('float32')
faiss.normalize_L2(query_embedding)

# Search
top_k = 5
scores, indices = index.search(query_embedding, top_k)

# Debug print (check shape)
print("DEBUG: indices.shape =", indices.shape)

# Robust result display
print(f"\nQuery: {query}\n\nTop {top_k} most similar results:\n")
try:
    for i in range(top_k):
        idx = int(indices[0][i]) if indices.ndim == 2 else int(indices[i])
        score = float(scores[0][i]) if scores.ndim == 2 else float(scores[i])
        print(f"Score: {score:.4f}")
        print(f"Label: {df.iloc[idx]['label']}")
        print(f"Text: {df.iloc[idx]['TEXT'][:300]}...\n")
except Exception as e:
    print("⚠️ Error displaying results:", e)
    print("Indices type:", type(indices), "Shape:", indices.shape)

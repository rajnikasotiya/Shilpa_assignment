import pandas as pd
import re
from sentence_transformers import SentenceTransformer, util

# === Load CSV ===
df = pd.read_csv("results.csv")

# === Categories we want to extract ===
CATEGORIES = [
    "Visit Reason",
    "Diagnosis",
    "Past Medical History",
    "Clinical Details",
    "Vital Signs",
    "Exam Results",
    "Lab Results",
    "Imaging Test Results",
    "Hospital and ED course",
    "Discharge Plan",
    "Full HPI",
    "Full Assessment and Plan"
]

# === Load embedding model ===
# This model is small but very good for semantic similarity
embedder = SentenceTransformer("all-MiniLM-L6-v2")

def extract_with_best_similarity(text, threshold=0.65):
    """
    Extract category-specific info from text.
    First try regex (if headings exist).
    If not found, fall back to semantic similarity search
    and return the single most relevant sentence for each category.
    """
    text = str(text).strip()
    result = {cat: [] for cat in CATEGORIES}
    
    # 1️⃣ Try heading-based extraction (Regex)
    for cat in CATEGORIES:
        pattern = rf"(?i){cat}\s*[:\-]\s*(.*?)(?=\n[A-Z][a-zA-Z ]*[:\-]|\Z)"
        match = re.search(pattern, text, re.S)
        if match:
            value = match.group(1).strip()
            if value:
                result[cat] = [v.strip() for v in value.split("\n") if v.strip()]
    
    # 2️⃣ If heading not found, use cosine similarity to find best match
    sentences = [s.strip() for s in re.split(r'[.\n]', text) if s.strip()]
    sentence_embeddings = embedder.encode(sentences, convert_to_tensor=True)
    
    for cat in CATEGORIES:
        if not result[cat]:  # No direct match
            cat_embedding = embedder.encode(cat, convert_to_tensor=True)
            cosine_scores = util.cos_sim(cat_embedding, sentence_embeddings)[0]
            
            best_score, best_idx = float('-inf'), None
            for idx, score in enumerate(cosine_scores):
                if score > best_score and score >= threshold:
                    best_score, best_idx = float(score), idx
            
            if best_idx is not None:
                result[cat] = [sentences[best_idx]]
    
    return result

# === Apply the function to each row ===
MODEL_NAME = "distilbert-base-uncased"
df[MODEL_NAME] = df["context"].apply(lambda x: extract_with_best_similarity(x))

# === Save results ===
df.to_csv("results_with_best_cosine_similarity.csv", index=False)
print("✅ Extraction completed with best match per category.")

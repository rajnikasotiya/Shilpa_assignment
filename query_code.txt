import pandas as pd
import duckdb
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM

# ==========================
# 1. Load CSV file
# ==========================
CSV_PATH = "COC_pharmacy_claims_sample.csv"   # <-- updated file name
df = pd.read_csv(CSV_PATH)

print("‚úÖ CSV Loaded. Shape:", df.shape)
print("Columns:", df.columns.tolist()[:10], "...")  # show first 10 columns

# ==========================
# 2. Load Text-to-SQL Model
# ==========================
MODEL_NAME = "gaussalgo/T5-LM-Large-text2sql-spider"
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
model = AutoModelForSeq2SeqLM.from_pretrained(MODEL_NAME)

# ==========================
# 3. Schema with Descriptions
# ==========================
col_descriptions = {
    "MBR_KEY": "Unique member identifier",
    "MCID": "Member claim ID",
    "MBRSHP_SOR_CD": "Membership source code",
    "ANLYTC_INCRD_YEAR_MNTH_NBR": "Year and month when claim was incurred",
    "ANLYTC_PAID_DT": "Date claim was paid",
    "CLM_CNDTN_CD": "Claim condition code",
    "CLM_CNDTN_NM": "Claim condition name",
    "ETG_CD": "Episode treatment group code",
    "ETG_NM": "Episode treatment group name",
    "HCC_CD": "Hierarchical condition category code",
    "HCC_SHRT_DESC": "Hierarchical condition category description",
    "MPR_IND": "Medication possession ratio indicator",
    "RFR_IND": "Referral indicator",
    "ANLYTC_PAID_AMT": "Paid claim amount",
    "SCRPT_CNT": "Prescription count",
    "RX_FILLED_DT": "Date prescription was filled",
    "REFIL_IND": "Refill indicator",
    "ADJDCTN_DT": "Claim adjudication date",
    "CLM_DISP_CD": "Claim disposition code",
    "NDC": "National drug code",
    "LBL_NM": "Drug label name",
    "RSTTD_SRVCAREA_CD": "Restricted service area code",
    "PROD_CD": "Product code",
    "LOB_CD": "Line of business code",
    "LOB_SHRT_DESC": "Line of business description",
    "SRVCAREA_ST_CD": "Service area state code",
    "SRVCAREA_ST_SHRT_DESC": "Service area state description",
    "MBR_ST_CD": "Member state code",
    "MBR_ST_NM": "Member state name",
    "AGE_YEAR_NBR": "Member age in years",
    "CLM_NBR": "Claim number",
    "CLM_LINE_NBR": "Claim line number",
    "GL_POST_DT": "General ledger posting date",
    "FLU_IND": "Flu indicator"
}
schema_info = "Table: claims_data, Columns: " + ", ".join(
    [f"{col} ({desc})" for col, desc in col_descriptions.items()]
)

# ==========================
# 4. Few-Shot Prompt Examples
# ==========================
few_shot_examples = """
### Example 1
Question: Show the top 5 most expensive drugs.
SQL: SELECT LBL_NM, AVG(ANLYTC_PAID_AMT) AS avg_cost
     FROM claims_data
     GROUP BY LBL_NM
     ORDER BY avg_cost DESC
     LIMIT 5;

### Example 2
Question: Find members whose average cost per prescription is abnormally high.
SQL: SELECT MBR_KEY, AVG(ANLYTC_PAID_AMT / NULLIF(SCRPT_CNT,0)) AS avg_cost_per_rx
     FROM claims_data
     GROUP BY MBR_KEY
     HAVING avg_cost_per_rx > 1000;

### Example 3
Question: Show members who had claims from more than 3 different products on the same day.
SQL: SELECT MBR_KEY, ANLYTC_PAID_DT, COUNT(DISTINCT PROD_CD) AS product_count
     FROM claims_data
     GROUP BY MBR_KEY, ANLYTC_PAID_DT
     HAVING product_count > 3;

### Example 4
Question: Find members who filled the same NDC drug at two or more service areas within 7 days.
SQL: SELECT MBR_KEY, NDC, COUNT(DISTINCT RSTTD_SRVCAREA_CD) AS service_area_count
     FROM claims_data
     GROUP BY MBR_KEY, NDC, RX_FILLED_DT
     HAVING service_area_count >= 2;

### Example 5
Question: Show claims where the condition is low severity but the cost is very high.
SQL: SELECT CLM_NBR, CLM_CNDTN_CD, CLM_CNDTN_NM, ANLYTC_PAID_AMT
     FROM claims_data
     WHERE HCC_CMRCL_MNGMNT_LOW_CD IS NOT NULL
       AND ANLYTC_PAID_AMT > 10000;
"""

# ==========================
# 5. Text-to-SQL Function
# ==========================
def text_to_sql(question: str, schema: str = "") -> str:
    """
    Converts a natural language question into an SQL query using few-shot examples.
    """
    prompt = f"""{few_shot_examples}

### Now answer the following:
Question: {question}
SQL:"""

    inputs = tokenizer.encode(prompt, return_tensors="pt", max_length=512, truncation=True)
    outputs = model.generate(inputs, max_length=256, num_beams=4, early_stopping=True)
    sql_query = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return sql_query

# ==========================
# 6. Register with DuckDB
# ==========================
duckdb.register("claims_data", df)

print("\nüí¨ Ask me anything about your data! (type 'exit' to quit)\n")

while True:
    question = input("? Enter your question: ")
    if question.lower() in ["exit", "quit", "q"]:
        print("üëã Exiting. Goodbye!")
        break

    # Generate SQL
    sql_query = text_to_sql(question, schema_info)
    print("\nGenerated SQL:\n", sql_query)

    # Try running SQL
    try:
        result = duckdb.query(sql_query).to_df()
        print("\nQuery Result:")
        print(result.head(10))  # show top 10 rows
    except Exception as e:
        print("\n‚ö†Ô∏è SQL Execution Failed:", e)

    print("\n" + "="*60 + "\n")

Find members whose average cost per prescription is abnormally high.
SELECT 
    MBR_KEY,
    SUM(ANLYTC_PAID_AMT) / NULLIF(SUM(SCRPT_CNT), 0) AS avg_cost_per_rx
FROM claims_data
GROUP BY MBR_KEY
HAVING avg_cost_per_rx > 1000   -- threshold depends on business rules
ORDER BY avg_cost_per_rx DESC;

Show members who had claims from more than 3 different providers on the same day (possible doctor shopping).
SELECT 
    MBR_KEY,
    ANLYTC_PAID_DT,
    COUNT(DISTINCT PROD_CD) AS provider_count
FROM claims_data
GROUP BY MBR_KEY, ANLYTC_PAID_DT
HAVING COUNT(DISTINCT PROD_CD) > 3;

Find members who had claims from service areas in different states on the same day (impossible travel).
SELECT 
    MBR_KEY,
    ANLYTC_PAID_DT,
    COUNT(DISTINCT SRVCAREA_ST_CD) AS states_used
FROM claims_data
GROUP BY MBR_KEY, ANLYTC_PAID_DT
HAVING COUNT(DISTINCT SRVCAREA_ST_CD) > 1;

Show claims where the condition (HCC/ETG) is low severity but the claim cost is very high.
SELECT 
    CLM_NBR,
    HCC_CD,
    HCC_SHRT_DESC,
    ANLYTC_PAID_AMT
FROM claims_data
WHERE HCC_CD IN ('LOW1','LOW2','LOW3')   -- placeholder for low-severity codes
  AND ANLYTC_PAID_AMT > 50000;

Find members who filled the same NDC drug at two or more pharmacies within 7 days.
SELECT 
    MBR_KEY,
    NDC,
    COUNT(DISTINCT PROD_CD) AS pharmacy_count,
    MIN(RX_FILLED_DT) AS first_fill,
    MAX(RX_FILLED_DT) AS last_fill
FROM claims_data
GROUP BY MBR_KEY, NDC
HAVING pharmacy_count > 1 
   AND DATEDIFF(DAY, MIN(RX_FILLED_DT), MAX(RX_FILLED_DT)) <= 7;

Show the top 5 most expensive drugs in each service state.
SELECT 
    SRVCAREA_ST_CD,
    NDC,
    LBL_NM,
    SUM(ANLYTC_PAID_AMT) AS total_paid
FROM claims_data
GROUP BY SRVCAREA_ST_CD, NDC, LBL_NM
QUALIFY ROW_NUMBER() OVER (PARTITION BY SRVCAREA_ST_CD ORDER BY SUM(ANLYTC_PAID_AMT) DESC) <= 5;

Members who refilled early and spent more than 10,000 in total.
SELECT 
    MBR_KEY,
    SUM(ANLYTC_PAID_AMT) AS total_paid,
    COUNT(*) AS refill_claims
FROM claims_data
WHERE REFIL_IND = 'Y'
GROUP BY MBR_KEY
HAVING total_paid > 10000 
   AND refill_claims > 5;

Detect members whose total monthly paid claims jumped more than 3x compared to previous month.
SELECT 
    MBR_KEY,
    ANLYTC_INCRD_YEAR_MNTH_NBR,
    SUM(ANLYTC_PAID_AMT) AS monthly_paid,
    LAG(SUM(ANLYTC_PAID_AMT)) OVER (PARTITION BY MBR_KEY ORDER BY ANLYTC_INCRD_YEAR_MNTH_NBR) AS prev_month_paid
FROM claims_data
GROUP BY MBR_KEY, ANLYTC_INCRD_YEAR_MNTH_NBR
HAVING monthly_paid > 3 * COALESCE(prev_month_paid, 0);


-- 1. Identify providers who submitted unusually high claim amounts compared to peers in the same specialty
SELECT PROVIDER_ID, SPECIALTY_CD, AVG(ANLYTC_PAID_AMT) AS avg_claim_amt
FROM claims_data
GROUP BY PROVIDER_ID, SPECIALTY_CD
HAVING AVG(ANLYTC_PAID_AMT) > (
    SELECT AVG(ANLYTC_PAID_AMT) + 3 * STDDEV(ANLYTC_PAID_AMT)
    FROM claims_data c
    WHERE c.SPECIALTY_CD = claims_data.SPECIALTY_CD
);

-- 2. Find members who visited emergency rooms more than twice in a single month
SELECT MBR_KEY, STRFTIME('%Y-%m', ANLYTC_PAID_DT) AS month, COUNT(*) AS er_visits
FROM claims_data
WHERE CLM_CNDTN_CD = 'ER'
GROUP BY MBR_KEY, STRFTIME('%Y-%m', ANLYTC_PAID_DT)
HAVING COUNT(*) > 2;

-- 3. Detect claims where the place of service (POS) code is inconsistent with the procedure performed
SELECT *
FROM claims_data
WHERE (POS_CD = 'HOME' AND CLM_CNDTN_CD = 'SURGERY')
   OR (POS_CD = 'OFFICE' AND CLM_CNDTN_CD = 'INPATIENT');

-- 4. Show members who switched to a high-cost brand drug despite availability of a cheaper generic equivalent
SELECT MBR_KEY, LBL_NM, MIN(ANLYTC_PAID_DT) AS first_use, MAX(ANLYTC_PAID_DT) AS switched_date
FROM claims_data
WHERE MBU_BRND_TYPE_SHRT_DESC = 'BRAND'
GROUP BY MBR_KEY, LBL_NM
HAVING MIN(ANLYTC_PAID_DT) > (
    SELECT MIN(ANLYTC_PAID_DT)
    FROM claims_data g
    WHERE g.MBR_KEY = claims_data.MBR_KEY
      AND g.MBU_BRND_TYPE_SHRT_DESC = 'GENERIC'
);

-- 5. Find providers billing the same procedure code for more than 20 patients in a single day
SELECT PROVIDER_ID, CLM_CNDTN_CD, ANLYTC_PAID_DT, COUNT(DISTINCT MBR_KEY) AS patient_count
FROM claims_data
GROUP BY PROVIDER_ID, CLM_CNDTN_CD, ANLYTC_PAID_DT
HAVING COUNT(DISTINCT MBR_KEY) > 20;

-- 6. Identify members whose claims were denied but later resubmitted with inflated costs
SELECT MBR_KEY, CLM_NBR, MIN(ANLYTC_PAID_AMT) AS denied_amt, MAX(ANLYTC_PAID_AMT) AS resubmitted_amt
FROM claims_data
WHERE CLM_DISP_CD IN ('DENIED', 'RESUBMITTED')
GROUP BY MBR_KEY, CLM_NBR
HAVING MAX(ANLYTC_PAID_AMT) > 2 * MIN(ANLYTC_PAID_AMT);

-- 7. Show cases where the paid amount greatly exceeds the billed amount
SELECT *
FROM claims_data
WHERE ANLYTC_PAID_AMT > BILL_AMT;

-- 8. Find pharmacies that dispensed the same drug to multiple members with the same address (possible fraud ring)
SELECT PROVIDER_ID, NDC, MEMBER_ADDRESS, COUNT(DISTINCT MBR_KEY) AS member_count
FROM claims_data
GROUP BY PROVIDER_ID, NDC, MEMBER_ADDRESS
HAVING COUNT(DISTINCT MBR_KEY) > 3;

-- 9. Detect members who had overlapping inpatient and outpatient claims on the same date
SELECT MBR_KEY, CLM_NBR, ANLYTC_PAID_DT, CLM_CNDTN_CD
FROM claims_data
WHERE CLM_CNDTN_CD IN ('INPATIENT', 'OUTPATIENT')
GROUP BY MBR_KEY, ANLYTC_PAID_DT
HAVING COUNT(DISTINCT CLM_CNDTN_CD) > 1;

-- 10. Show members who had prescriptions from multiple specialties that donâ€™t align with their diagnosis history
SELECT MBR_KEY, NDC, CLM_CNDTN_CD, SPECIALTY_CD
FROM claims_data
WHERE (CLM_CNDTN_CD = 'DIABETES' AND SPECIALTY_CD NOT IN ('ENDOCRINOLOGY', 'GENERAL'))
   OR (CLM_CNDTN_CD = 'ASTHMA' AND SPECIALTY_CD NOT IN ('PULMONOLOGY', 'GENERAL'));


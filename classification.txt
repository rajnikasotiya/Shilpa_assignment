import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
import seaborn as sns
import shap
import warnings
warnings.filterwarnings("ignore")

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_extraction.text import TfidfVectorizer

from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import MultinomialNB
from sklearn.svm import LinearSVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, f1_score, precision_score, recall_score, confusion_matrix

# ---------------------------
# Load and Clean Data
# ---------------------------
df = pd.read_csv("mental_health.csv")

# Ensure 'Text' is string to avoid replace error
df['Text'] = df['Text'].astype(str)
df['Label'] = df['Label'].astype(str).str.strip()

# Drop empty rows
df.dropna(subset=['Text', 'Label'], inplace=True)

# Clean text
def clean_text(text):
    try:
        text = str(text).lower()
        text = re.sub(r'https?://\S+|www\.\S+', '', text)
        text = re.sub(r'<.*?>+', '', text)
        text = re.sub(r'[^a-zA-Z\s]', '', text)
        text = re.sub(r'\s+', ' ', text).strip()
        return text
    except:
        return ""

df['clean_text'] = df['Text'].apply(clean_text)

# ---------------------------
# Encode Labels and Vectorize
# ---------------------------
label_encoder = LabelEncoder()
df['encoded_label'] = label_encoder.fit_transform(df['Label'])

X_train, X_test, y_train, y_test = train_test_split(
    df['clean_text'], df['encoded_label'],
    test_size=0.2, stratify=df['encoded_label'], random_state=42
)

tfidf = TfidfVectorizer(max_features=5000, ngram_range=(1, 2), stop_words='english')
X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

# ---------------------------
# Train Multiple Models
# ---------------------------
models = {
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "Naive Bayes": MultinomialNB(),
    "SVM": LinearSVC(),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42)
}

results = []
f1_scores = {}

for name, model in models.items():
    model.fit(X_train_tfidf, y_train)
    y_pred = model.predict(X_test_tfidf)

    acc = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred, average='macro')
    prec = precision_score(y_test, y_pred, average='macro')
    rec = recall_score(y_test, y_pred, average='macro')

    f1_scores[name] = f1

    print(f"\n=== {name} ===")
    print("Accuracy:", acc)
    print("F1 Score (macro):", f1)
    print("Precision (macro):", prec)
    print("Recall (macro):", rec)
    print("\nClassification Report:\n", classification_report(y_test, y_pred, target_names=label_encoder.classes_))

    # Confusion matrix
    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(8, 5))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
    plt.title(f"Confusion Matrix - {name}")
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.show()

# ---------------------------
# Select Best Model (by F1)
# ---------------------------
best_model_name = max(f1_scores, key=f1_scores.get)
best_model = models[best_model_name]

print(f"\n‚úÖ Best Model: {best_model_name} (F1 = {f1_scores[best_model_name]:.4f})")

# ---------------------------
# SHAP Explanation for Best Model
# ---------------------------

if best_model_name in ['Logistic Regression', 'Naive Bayes']:
    # SHAP supports linear models directly
    explainer = shap.Explainer(best_model, X_train_tfidf, feature_names=tfidf.get_feature_names_out())

    # Pick a sample to explain
    sample_idx = 5
    shap_values = explainer(X_test_tfidf[sample_idx])

    print(f"\nüß† Original Text:\n{X_test.iloc[sample_idx]}")
    print(f"üìå True Label: {label_encoder.inverse_transform([y_test.iloc[sample_idx]])[0]}")
    print(f"üîÆ Predicted: {label_encoder.inverse_transform([best_model.predict(X_test_tfidf[sample_idx])])[0]}")

    # Visualize SHAP values
    shap.plots.text(shap_values)

else:
    print(f"\n‚ö†Ô∏è SHAP not fully supported for {best_model_name} directly using TF-IDF.")
    print("You can try model-agnostic explainer like KernelExplainer, but it's slower.")

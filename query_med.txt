-- 1. This query counts the number of unique claims submitted in each reporting month. 
-- It helps track overall claim volumes and analyze trends over different time periods.
SELECT 
    SNAP_YEAR_MNTH_NER AS year_month,
    COUNT(DISTINCT CLM_NBR) AS total_claims
FROM claims_dataset
GROUP BY SNAP_YEAR_MNTH_NER
ORDER BY year_month;

-- 2. This query retrieves the top 5 providers with the highest number of claims. 
-- It is useful to identify high-volume providers and focus on key contributors in the network.
SELECT 
    RNDRG_PROV_NM AS provider_name,
    COUNT(DISTINCT CLM_NBR) AS claim_count
FROM claims_dataset
GROUP BY RNDRG_PROV_NM
ORDER BY claim_count DESC
LIMIT 5;

-- 3. This query lists all unique insurance products available in the dataset. 
-- It can be used to build a product catalog or validate product availability across claims.
SELECT DISTINCT PROD_CD, PROD_NM, PROD_SHRT_DESC
FROM claims_dataset;

-- 4. This query calculates the average paid and allowed claim amounts by line of business. 
-- It helps compare financial performance and cost patterns across different business segments.
SELECT 
    LOB_CD,
    LOB_SHRT_DESC,
    AVG(ANLYTC_PAID_AMT) AS avg_paid_amt,
    AVG(ANLYTC_ALWD_AMT) AS avg_allowed_amt
FROM claims_dataset
GROUP BY LOB_CD, LOB_SHRT_DESC
ORDER BY avg_paid_amt DESC;

-- 5. This query segments members into age groups and breaks them down by gender. 
-- It is useful for demographic analysis and helps understand population distribution.
SELECT 
    CASE 
        WHEN AGE_YEAR_NBR < 18 THEN 'Child'
        WHEN AGE_YEAR_NBR BETWEEN 18 AND 34 THEN 'Young Adult'
        WHEN AGE_YEAR_NBR BETWEEN 35 AND 54 THEN 'Adult'
        WHEN AGE_YEAR_NBR >= 55 THEN 'Senior'
    END AS age_group,
    GNDR_CD,
    COUNT(DISTINCT MBR_KEY) AS member_count
FROM claims_dataset
GROUP BY age_group, GNDR_CD
ORDER BY age_group, member_count DESC;

-- 6. This query retrieves all claims that required prior authorization. 
-- It is useful for monitoring compliance with authorization rules and auditing high-risk services.
SELECT 
    CLM_NBR,
    CLM_LINE_NBR,
    AUTHRZN_IND,
    EDM_AUTHRZN_KEY,
    RNDRG_PROV_NM,
    PROD_NM
FROM claims_dataset
WHERE AUTHRZN_IND = 'Y'
ORDER BY CLM_NBR;

-- 7. This query identifies providers with high-cost claims where the paid amount exceeds 10,000. 
-- It helps track expensive claims and can guide provider negotiations or cost-control strategies.
SELECT 
    RNDRG_PROV_NM AS provider_name,
    COUNT(DISTINCT CLM_NBR) AS high_cost_claims,
    SUM(ANLYTC_PAID_AMT) AS total_paid
FROM claims_dataset
WHERE ANLYTC_PAID_AMT > 10000
GROUP BY RNDRG_PROV_NM
ORDER BY total_paid DESC;

-- 8. This query finds members with more than one chronic condition based on HCC codes. 
-- It supports risk stratification, care management programs, and identifying complex patients.
SELECT 
    MBR_KEY,
    COUNT(DISTINCT HCC_CD) AS chronic_condition_count
FROM claims_dataset
WHERE HCC_CD IS NOT NULL
GROUP BY MBR_KEY
HAVING COUNT(DISTINCT HCC_CD) > 1
ORDER BY chronic_condition_count DESC;

-- 9. This query summarizes claims and total paid amounts at the state level. 
-- It provides geographic insights into claim volume and healthcare spending by region.
SELECT 
    SRVCAREA_ST_CD AS state,
    COUNT(DISTINCT CLM_NBR) AS claim_count,
    SUM(ANLYTC_PAID_AMT) AS total_paid_amt
FROM claims_dataset
GROUP BY SRVCAREA_ST_CD
ORDER BY total_paid_amt DESC;



-- 10. This query summarizes the total claims and total paid amount by state.  
-- It helps compare cost and utilization geographically.  
SELECT 
    SRVCAREA_ST_CD AS state,
    COUNT(DISTINCT CLM_NBR) AS total_claims,
    SUM(ANLYTC_PAID_AMT) AS total_paid
FROM claims_dataset
GROUP BY SRVCAREA_ST_CD
ORDER BY total_paid DESC;

-- 11. This query retrieves the top 5 most expensive procedures (by average paid amount).  
-- It helps identify high-cost medical services.  
SELECT 
    PROC_CD,
    PROC_DESC,
    AVG(ANLYTC_PAID_AMT) AS avg_paid
FROM claims_dataset
GROUP BY PROC_CD, PROC_DESC
ORDER BY avg_paid DESC
LIMIT 5;

-- 12. This query finds the distribution of claims by gender.  
-- It is useful for gender-based utilization analysis.  
SELECT 
    GNDR_CD,
    COUNT(DISTINCT CLM_NBR) AS claim_count,
    SUM(ANLYTC_PAID_AMT) AS total_paid
FROM claims_dataset
GROUP BY GNDR_CD;

-- 13. This query shows the average hospital length of stay per admission.  
-- It helps monitor inpatient utilization.  
SELECT 
    MBR_KEY,
    AVG(DATEDIFF(DAY, CLM_LINE_SRVC_STRT_DT, CLM_LINE_SRVC_END_DT)) AS avg_length_of_stay
FROM claims_dataset
WHERE ER_ADMT_IND = 'Y'
GROUP BY MBR_KEY;

-- 14. This query identifies providers who submitted claims across multiple states.  
-- It flags multi-state billing patterns.  
SELECT 
    RNDRG_PROV_NM,
    COUNT(DISTINCT SRVCAREA_ST_CD) AS state_count
FROM claims_dataset
GROUP BY RNDRG_PROV_NM
HAVING COUNT(DISTINCT SRVCAREA_ST_CD) > 1;

-- 15. This query calculates the denial rate by provider.  
-- It helps track providers with a high proportion of denied claims.  
SELECT 
    RNDRG_PROV_NM,
    COUNT(CASE WHEN CLM_DISP_CD = 'DENIED' THEN 1 END) * 1.0 / COUNT(*) AS denial_rate
FROM claims_dataset
GROUP BY RNDRG_PROV_NM
ORDER BY denial_rate DESC;

-- 16. This query shows the top 10 diagnosis codes based on frequency.  
-- It helps identify the most common conditions.  
SELECT 
    DIAG_CD,
    DIAG_DESC,
    COUNT(*) AS claim_count
FROM claims_dataset
GROUP BY DIAG_CD, DIAG_DESC
ORDER BY claim_count DESC
LIMIT 10;

-- 17. This query finds members with more than 10 claims in a single month.  
-- It flags high utilizers.  
SELECT 
    MBR_KEY,
    DATE_TRUNC('month', CLM_LINE_SRVC_STRT_DT) AS claim_month,
    COUNT(DISTINCT CLM_NBR) AS claim_count
FROM claims_dataset
GROUP BY MBR_KEY, DATE_TRUNC('month', CLM_LINE_SRVC_STRT_DT)
HAVING COUNT(DISTINCT CLM_NBR) > 10
ORDER BY claim_count DESC;

-- 18. This query calculates the average paid amount per member per year.  
-- It helps understand per-member costs.  
SELECT 
    MBR_KEY,
    EXTRACT(YEAR FROM CLM_LINE_SRVC_STRT_DT) AS claim_year,
    AVG(ANLYTC_PAID_AMT) AS avg_paid_per_member
FROM claims_dataset
GROUP BY MBR_KEY, EXTRACT(YEAR FROM CLM_LINE_SRVC_STRT_DT);

-- 19. This query lists the top 5 providers by total paid amount (not just claim count).  
-- It highlights providers driving the highest costs.  
SELECT 
    RNDRG_PROV_NM,
    SUM(ANLYTC_PAID_AMT) AS total_paid
FROM claims_dataset
GROUP BY RNDRG_PROV_NM
ORDER BY total_paid DESC
LIMIT 5;

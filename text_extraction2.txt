!pip install transformers accelerate pandas


import pandas as pd
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
import json


# Load your result.csv
df = pd.read_csv("result.csv")

# Let's just confirm we have the column
print(df.columns)
print(df['context'].head(2))


model_name = "microsoft/Phi-3-mini-4k-instruct"

tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    device_map="cpu",
    torch_dtype="auto"
)

generator = pipeline(
    "text-generation",
    model=model,
    tokenizer=tokenizer,
    device=-1  # CPU
)




def extract_medical_info(text):
    prompt = f"""
You are a medical information extractor.
Extract the following fields from the given text and return as JSON with lists for each field:
- visit_reason
- diagnosis
- past_medical_history
- vital_signs
- exam_results
- lab_results
- full_HPI
- discharge_plan

Text:
{text}

Respond only with valid JSON.
    """

    response = generator(
        prompt,
        max_new_tokens=300,
        temperature=0,
        do_sample=False
    )

    try:
        json_str = response[0]["generated_text"].split("```json")[-1].split("```")[0]
        data = json.loads(json_str)
    except:
        try:
            data = json.loads(response[0]["generated_text"])
        except:
            data = {field: [] for field in [
                "visit_reason","diagnosis","past_medical_history","vital_signs",
                "exam_results","lab_results","full_HPI","discharge_plan"
            ]}
    return data





results = df['context'].apply(extract_medical_info)

# Convert results to separate columns
results_df = pd.DataFrame(results.tolist())

# Merge with original dataframe
df_extracted = pd.concat([df, results_df], axis=1)


df_extracted.to_csv("result_with_extracted_info.csv", index=False)


visit_reason | diagnosis | past_medical_history | vital_signs | exam_results | lab_results | full_HPI | discharge_plan

# Install dependencies (uncomment if running in Colab or Jupyter)
# !pip install pandas nltk sentence-transformers faiss-cpu

import pandas as pd
import re
import string
import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from sentence_transformers import SentenceTransformer, util
import faiss
import numpy as np

# Load data
df = pd.read_csv("medical.dat", sep="\t", names=["TEXT", "label"], encoding='utf-8')

# Download stopwords
nltk.download('stopwords')
stop_words = set(stopwords.words('english'))
stemmer = PorterStemmer()

# Preprocessing function
def preprocess(text):
    text = str(text).lower()
    text = re.sub(r'\d+', '', text)
    text = text.translate(str.maketrans('', '', string.punctuation))
    tokens = text.split()
    tokens = [stemmer.stem(tok) for tok in tokens if tok not in stop_words]
    return ' '.join(tokens)

# Clean text
df['clean_text'] = df['TEXT'].apply(preprocess)

# Load BioBERT sentence model
model = SentenceTransformer('pritamdeka/BioBERT-sentence')
corpus = df['clean_text'].tolist()
corpus_embeddings = model.encode(corpus, convert_to_tensor=True)

# Query text and preprocess
query = "abdominal pain and liver issues"
query_processed = preprocess(query)
query_embedding = model.encode([query_processed], convert_to_tensor=True)

# Cosine similarity
cosine_scores = util.cos_sim(query_embedding, corpus_embeddings)[0]
top_k = 5
top_results = cosine_scores.topk(k=top_k)

print(f"\nQuery: {query}\nTop {top_k} similar abstracts (cosine similarity):\n")
for score, idx in zip(top_results.values, top_results.indices):
    print(f"Score: {score.item():.4f}")
    print(f"Label: {df.loc[idx.item(), 'label']}")
    print(f"Text: {df.loc[idx.item(), 'TEXT'][:300]}...\n")

# FAISS index for fast similarity search
emb_np = corpus_embeddings.cpu().numpy()
emb_np = emb_np / np.linalg.norm(emb_np, axis=1, keepdims=True)
index = faiss.IndexFlatIP(emb_np.shape[1])
index.add(emb_np)

q_np = query_embedding.cpu().numpy()
q_np = q_np / np.linalg.norm(q_np, axis=1, keepdims=True)
_, I = index.search(q_np, k=5)

print("\nTop results using FAISS:")
for i in I[0]:
    print(f"Label: {df.loc[i, 'label']}")
    print(f"Text: {df.loc[i, 'TEXT'][:300]}...\n")

!pip install --upgrade transformers pandas

import pandas as pd
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline

model_name = "microsoft/Phi-3-mini-4k-instruct"

# Load tokenizer and model with trust_remote_code
tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    device_map="cpu",
    torch_dtype="auto",
    trust_remote_code=True
)

generator = pipeline(
    "text-generation",
    model=model,
    tokenizer=tokenizer,
    device=-1  # ensures CPU usage
)

df = pd.read_csv("result.csv")

def extract_medical_info(text):
    prompt = f"""
You are a medical information extractor. Please output a valid JSON with lists for each of:
- visit_reason
- diagnosis
- past_medical_history
- vital_signs
- exam_results
- lab_results
- full_HPI
- discharge_plan

Note:
{text}
"""
    resp = generator(prompt, max_new_tokens=200, temperature=0.0, do_sample=False)[0]["generated_text"]
    import json, re
    match = re.search(r"\{.*\}", resp, re.DOTALL)
    if match:
        try:
            return json.loads(match.group(0))
        except json.JSONDecodeError:
            pass
    return {k: [] for k in ["visit_reason","diagnosis","past_medical_history",
                            "vital_signs","exam_results","lab_results",
                            "full_HPI","discharge_plan"]}

results = df["context"].apply(extract_medical_info)
results_df = pd.DataFrame(results.tolist())
df_extracted = pd.concat([df, results_df], axis=1)
df_extracted.to_csv("result_with_extractions.csv", index=False)
print("Extraction complete. Saved to result_with_extractions.csv")

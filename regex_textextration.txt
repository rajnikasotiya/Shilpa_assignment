import pandas as pd
import json
import re

# Categories to extract
CATEGORIES = [
    "Visit Reason",
    "Diagnosis",
    "Past Medical History",
    "Clinical Details",
    "Vital Signs",
    "Exam Results",
    "Lab Results",
    "Imaging Test Results",
    "Hospital and ED course",
    "Discharge Plan",
    "Full HPI",
    "Full Assessment and Plan"
]

# Function to extract medical info from context
def extract_info(text):
    text = str(text).strip()
    extracted = {cat: "" if cat != "Diagnosis" else [] for cat in CATEGORIES}

    # Regex: Category followed by colon or dash, capture until next category or end
    pattern = r"(?P<cat>{cats})[:\-]\s*(?P<val>.*?)(?=\n\s*(?:{cats})[:\-]|\Z)".format(
        cats="|".join([re.escape(cat) for cat in CATEGORIES])
    )

    matches = re.finditer(pattern, text, re.IGNORECASE | re.DOTALL)

    for match in matches:
        cat = match.group("cat").strip()
        val = match.group("val").strip()
        if cat.lower() == "diagnosis":
            extracted["Diagnosis"] = [d.strip() for d in re.split(r",|\n", val) if d.strip()]
        else:
            extracted[cat] = val

    return json.dumps(extracted, ensure_ascii=False)

# Load the input CSV
df = pd.read_csv("results.csv")

# Ensure columns exist
if "context" not in df.columns or "model_used" not in df.columns:
    raise ValueError("CSV must contain 'context' and 'model_used' columns")

# Process each row: add new column with model name
for model_name in df["model_used"].unique():
    mask = df["model_used"] == model_name
    df.loc[mask, model_name] = df.loc[mask, "context"].apply(extract_info)

# Save updated CSV
df.to_csv("results_with_model_column.csv", index=False)

print("âœ… Done! File saved as results_with_model_column.csv")

!pip install --upgrade transformers pandas

import pandas as pd
import json, re
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline

# Model name
model_name = "microsoft/Phi-3-mini-4k-instruct"
column_name = model_name.replace("/", "_")

# Load tokenizer & model
tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    device_map="cpu",          # CPU mode
    torch_dtype="auto",
    trust_remote_code=True
)

# Create pipeline (no device param!)
generator = pipeline(
    "text-generation",
    model=model,
    tokenizer=tokenizer
)

# Read dataset
df = pd.read_csv("result.csv")

# Function to extract info
def extract_medical_info(text):
    prompt = f"""
You are a medical information extractor.
Output ONLY a valid JSON object with these keys:
visit_reason, diagnosis, past_medical_history, vital_signs, exam_results, lab_results, full_HPI, discharge_plan.
Each value should be a list of strings.

Text:
{text}
"""
    resp = generator(prompt, max_new_tokens=200, temperature=0.0, do_sample=False)[0]["generated_text"]
    match = re.search(r"\{.*\}", resp, re.DOTALL)
    if match:
        try:
            data = json.loads(match.group(0))
            return json.dumps(data)  # store as string in one column
        except json.JSONDecodeError:
            pass
    return json.dumps({
        "visit_reason": [],
        "diagnosis": [],
        "past_medical_history": [],
        "vital_signs": [],
        "exam_results": [],
        "lab_results": [],
        "full_HPI": [],
        "discharge_plan": []
    })

# Batch process
batch_size = 10
results = []
for i in range(0, len(df), batch_size):
    batch_texts = df["context"].iloc[i:i+batch_size].tolist()
    batch_results = [extract_medical_info(txt) for txt in batch_texts]
    results.extend(batch_results)

# Save results in one column
df[column_name] = results
df.to_csv("result_with_model_output.csv", index=False)
print(f"Extraction complete. Saved to result_with_model_output.csv with column '{column_name}'.")
